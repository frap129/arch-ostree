#!/usr/bin/env bash
# shellcheck disable=SC2154

set -euo pipefail

scriptdir="$(dirname "$(readlink -f "$0")")"
lib_dir="$scriptdir/lib"
share_dir="$scriptdir/share"

# shellcheck source=lib/common.sh
source "$lib_dir/common.sh"

builder_stages=""
builder_tag="archlinux-ostree-builder"
ostree_repo="/sysroot/ostree/repo"
sysroot_dir="/mnt"
podman_build_cache=false
deploy_env_dir="$scriptdir/deployment"
src_dir="$scriptdir/src"
rootfs_stages=()
extra_contexts=()
rootfs_tag="archlinux-ostree-rootfs"

# shellcheck source=arch-ostree.config.example
[[ -f "$scriptdir/arch-ostree.config" ]] && source "$scriptdir/arch-ostree.config"

usage() {
	cat <<EOF
USAGE: ${0##*/} [options] [command] [arg...]

<bool> is a value of 0, false, no, 1, true or yes.
all value options may be defined in $scriptdir/arch-ostree.config

COMMON OPTIONS:
    --builder-stages <name>
        A comma delimted list of the image stages to build. The stages are
        built in order and commited as images tagged "arch-ostree-builder-<stage>".
        The final stage is tagged as --builder-tag. A build arg
        BASE_IMAGE="localhost/arch-ostree-builder-<previous stage>"
        is passed durring the each build, to allow build stages to be
        dyanmically combined. Stages are expected to be defined in a file named
        "Containerfile.<stage>". Should multiple stages be defined in the same
        file, they should be added to this list as "<group>:<stage>", where
        <group> is the extension of the Containerfile they are defined in.
        Default: undefined, thus the container defined in
        $share_dir/Containerfile.builder is used.
    --builder-tag <name>
        Name of the tag to use for the pacstrap container.
        Default: archlinux-ostree-builder
    --deploy-env-dir <path>
        Path to the directory that's used as the deployment environment.
        Default: $scriptdir/deployment
    --ostree-repo <path>
        Path to the ostree repository.
        Default: /sysroot/ostree/repo
    --podman-build-cache <bool>
        Enable/Disable podman build cache. Boolean. This controls both podmans
        --no-cache option and buildahs BUILDAH_LAYERS environment variable.
        Default: no.
    --pacman-cache <path>
        Path to a persistent pacman package cache.
        Default: undefined, thus the pacman cache is disabled.
    --aur-cache <path>
        Path to use as a persistent AUR package build cache.
        Default: undefined, thus the aur cache is disabled.
    --sysroot-dir
        Path to the directory where your rootfs and all your partitions
        (like boot or efi) are mounted.
        Default: /mnt
    --help
        Print this help message

CONTAINER OPTIONS:
    --src-dir <path>
        Path to the directory with Containerfiles and setup files that build
        the rootfs.
        Default: $scriptdir/src
    --extra-contexts <build contexts>
        A comma delimited list of container build contexts to be used for the
        build.
        Default: undefined, thus no extra build contexts will be used.
    --rootfs-stages <image stages>
        A comma delimted list of the image stages to build. The stages are
        built in order and commited as images tagged "arch-ostree-rootfs-<stage>".
        The final stage is tagged as --rootfs-tag. A build arg
        BASE_IMAGE="localhost/arch-ostree-tmp-<previous stage>"
        is passed durring the each build, to allow build stages to be
        dyanmically combined. Stages are expected to be defined in a file named
        "Containerfile.<stage>". Should multiple stages be defined in the same
        file, they should be added to this list as "<group>:<stage>", where
        <group> is the extension of the Containerfile they are defined in.
        Default: undefined, thus no images will be built.
    --rootfs-tag <name>
        Name of the tag to use for the rootfs container.
        Default: archlinux-ostree-rootfs

COMMON COMMANDS:
    prepare_live_env
        Prepare currently booted live ISO environment for setting up a new
        ostree installation.
    build-builder
    build_builder_container
        (Re-)Build pacstrap container that's used by the other commands and tag
        it with --builder-tag.
    deploy_env -- [arg...]
        Spawn a shell with a deployment at --deploy-env-dir as the rootfs.
        This can be used to install the bootloader and create your first
        deployment from the arch live ISO.
        The shell runs inside a chroot that looks similar to a booted ostree
        environment.

CONTAINER COMMANDS:
    build	
    build_rootfs_container
        Build all requested stages from files in --src-dir and tag it with
        --rootfs-tag.
    commit -- [arg...]
    commit_rootfs_container -- [arg...]
        Commit --rootfs-tag container to --ostree-repo. This tool provides
        --repo and --tree-dir to "ostree commit". Everything else
        (like branch name) can and has to be provided by you.
    enter -- [arg...]
    enter_rootfs_container -- [arg...]
        Enter --rootfs-tag container. All changes will be lost.
EOF
}

prepare_live_env() {
	msg "Install required packages"
	pacman \
		--needed \
		--noconfirm \
		-S \
		ostree \
		podman

	msg "Patch storage.conf"
	sed -i \
		-e 's|^\(graphroot\s*=\s*\).*|\1"/mnt/setup/container-storage"|g' \
		/etc/containers/storage.conf

	msg "Patch containers.conf"
	sed -i \
		-e 's|^# \(image_copy_tmp_dir\s*=\s*\).*|\1"/mnt/setup/container-tmp"|g' \
		/etc/containers/containers.conf

	mkdir -p "/mnt/setup/container-tmp"
}

deploy_env() {
	# We want to mount everything that the user has mounted at
	# `sysroot_dir`(usually /mnt). This gives us all of the bootloader
	# partitions.
	findmnt_output="$(findmnt \
		--all \
		--real \
		--submounts \
		--mountpoint "$sysroot_dir" \
		--list \
		--noheadings \
		--output TARGET |
		tail -n +2)"

	mkdir -p "$deploy_env_dir/etc"

	mount -o ro,bind "$deploy_env_dir" "$deploy_env_dir"
	mount -o ro,bind "$deploy_env_dir/usr/etc" "$deploy_env_dir/etc"

	for path in /run /tmp /var; do
		mount -t tmpfs tmpfs "${deploy_env_dir}${path}"
	done

	for path in home mnt roothome usrlocal srv opt; do
		mkdir "$deploy_env_dir/var/$path"
	done

	for path in /dev /proc /sys; do
		mount --rbind "$path" "${deploy_env_dir}${path}"
	done

	mount -o rw,bind "$sysroot_dir" "${deploy_env_dir}/sysroot"

	mounted_boot=false
	if [ -n "$findmnt_output" ]; then
		while read -r source; do
			target="$(realpath --relative-to="$sysroot_dir" "$source")"
			mount -o bind "$source" "${deploy_env_dir}/$target"

			if [ "$target" = "boot" ]; then
				mounted_boot=true
			fi
		done <<<"$findmnt_output"
	fi

	# In case there is no separate boot partition we need to
	# bind-mount the boot directory so a `grub-install` within the
	# deploy env installs to the actual boot directory outside of
	# the temporary deployment rootfs.
	if [ -e "$sysroot_dir/boot" ] && [ $mounted_boot = false ]; then
		mount --mkdir -o bind "$sysroot_dir/boot" "$deploy_env_dir/boot"
	fi

	chroot "$deploy_env_dir" "${args[@]}"
}

_multistage_container_build() {
	tmp_name=$1
	final_tag=$2
	build_cmd=$3
	shift 3
	build_stages=("$@")

	# Build all requested build stages
	last_stage=""
	for build_stage in "${build_stages[@]}"; do
		# Parse build group and build stage
		if [[ "$build_stage" == *":"* ]]; then
			group=$(cut -d: -f1 <<< "$build_stage")
			stage=$(cut -d: -f2 <<< "$build_stage")
		else
			group="$build_stage"
			stage="$build_stage"
		fi

		# Handle tag for final image
		if [[ "$build_stage" == "${build_stages[-1]}" ]]; then
			tag="$final_tag"
		elif [[ "$stage" != "$group" ]]; then
			tag="arch-ostree-${tmp_name}-${group}-${stage}"
		else
			tag="arch-ostree-${tmp_name}-${stage}"
		fi

		# Build requested stage, using the previous stage as a base
		$build_cmd \
			-f "$(find $src_dir -name "Containerfile.$group")" \
			--build-arg BASE_IMAGE="localhost/$last_stage" \
			--target $stage \
			-t "$tag"

		last_stage="$tag"
	done
}

_builder_podman_cmd() {
	podman build \
		"${podman_build_cache_args[@]}" \
		--cap-add sys_admin \
		--cap-add mknod \
		$@
}

build_builder_container() {
	if [[ -z "$builder_stages" ]]; then
		_builder_podman_cmd \
			-f "$share_dir/Containerfile.builder" \
			-t "$builder_tag"
	else
		_multistage_container_build \
			"builder" \
			"$builder_tag" \
			"_builder_podman_cmd" \
			"${builder_stages[@]}"
	fi
}

_rootfs_podman_cmd() {
	podman build \
		${podman_build_cache_args[@]} \
		${podman_build_context_args[@]} \
		${pacman_cache_args[@]} \
		${aur_cache_args[@]} \
		--cap-add sys_admin \
		--cap-add mknod \
		$@
}
build_rootfs_container() {
	_multistage_container_build \
		"rootfs" \
		"$rootfs_tag" \
		"_rootfs_podman_cmd" \
		"${rootfs_stages[@]}"
}

enter_rootfs_container() {
	podman run \
		--rm -it \
		"localhost/$rootfs_tag" \
		"$@"
}

commit_rootfs_container() {
	podman run \
		--cap-add sys_admin \
		--security-opt apparmor=unconfined \
		--mount "type=image,src=localhost/$rootfs_tag,dst=/mnt-lower" \
		--mount "type=bind,src=$ostree_repo,dst=/sysroot/ostree/repo" \
		-v "$lib_dir:/opt/lib:ro" \
		-v "$share_dir:/opt/share:ro" \
		--rm -it \
		"localhost/$builder_tag" \
		/opt/lib/commit_rootfs "$@"
}

long_opts=(
	builder-tag:
	deploy-env-dir:
	help
	ostree-repo:
	pacman-cache:
	aur-cache:
	podman-build-cache:
	src-dir:
	rootfs-stages:
	extra-contexts:
	rootfs-tag:
	sysroot-dir:
)
if ! temp=$(getopt -o '' --long "$(join_by , "${long_opts[@]}")" -- "$@"); then
	die "Invalid arguments"
fi

eval set -- "$temp"
while true; do
	case "$1" in
	'--builder-tag' | \
		'--rootfs-tag')
		name="$(arg_to_varname "$1")"
		printf -v "$name" "%s" "$2"
		shift 2
		continue
		;;
	'--aur-cache' | \
		'--deploy-env-dir' | \
		'--ostree-repo' | \
		'--pacman-cache' | \
		'--src-dir' | \
		'--sysroot-dir')
		name="$(arg_to_varname "$1")"
		value="$(realpath "$2")"
		printf -v "$name" "%s" "$value"
		shift 2
		continue
		;;
	'--extra-contexts' | \
		'--rootfs-stages')
		name="$(arg_to_varname "$1")"
		readarray -td, $name <<< $2
		shift 2
		continue
		;;
	'--podman-build-cache')
		name="$(arg_to_varname "$1")"

		case "$2" in
		'true' | '1' | 'yes')
			eval "$name=true"
			;;
		'false' | '0' | 'no')
			eval "$name=false"
			;;
		*)
			die "Unsupported bool value: $2"
			;;
		esac

		shift 2
		continue
		;;
	'--help')
		usage
		exit $(($# ? 0 : 1))
		;;
	'--')
		shift
		break
		;;
	*)
		die "BUG: Unexpected argument: $1"
		;;
	esac
done

if [ -z ${1+x} ]; then
	die "Missing command argument"
fi
command="${1}"
shift 1

pacman_cache_args=()
# shellcheck disable=SC2236 # This doesn't work with -n
if [ ! -z ${pacman_cache+x} ]; then
	mkdir -p "$pacman_cache"
	pacman_cache_args=(
		-v "$pacman_cache:/var/cache/pacman/pkg"
	)
fi

aur_cache_args=()
# shellcheck disable=SC2236 # This doesn't work with -n
if [ ! -z ${aur_cache+x} ]; then
	mkdir -p "$aur_cache"
	aur_cache_args=(
		-v "$aur_cache:/home/builder/aur"
	)
fi

podman_build_cache_args=()
if [ "$podman_build_cache" = false ]; then
	podman_build_cache_args+=(--no-cache)
	export BUILDAH_LAYERS=false
fi

podman_build_context_args=()
for context in "${extra_contexts[@]}"; do
	podman_build_context_args+=(
		--build-context $context
	)
done

case "$command" in
'prepare_live_env')
	prepare_live_env
	;;
'build-builder' | 'build_builder_container')
	build_builder_container
	;;
'build' | 'build_rootfs_container')
	build_rootfs_container
	;;
'enter' | 'enter_rootfs_container')
	enter_rootfs_container "$@"
	;;
'commit' | 'commit_rootfs_container')
	commit_rootfs_container "$@"
	;;
'deploy_env')
	args=("$@")
	unshare -m bash -c "set -euo pipefail; $(declare_all); deploy_env"
	;;
*)
	die "Unsupported command: ${command}"
	;;
esac

msg "Successful"
