#!/usr/bin/env bash
# shellcheck disable=SC2154

set -euo pipefail

scriptdir="$(dirname "$(readlink -f "$0")")"
config_dir="/etc/trellis"
config_file="$config_dir/trellis.conf"
hooks_dir="$config_dir/hooks.d"

# Option defaults
builder_stages=""
builder_tag="trellis-builder"
ostree_repo="/sysroot/ostree/repo"
sysroot_dir="/mnt"
podman_build_cache=false
pacman_cache="/var/cache/pacman/pkg"
aur_cache="/var/cache/trellis/aur"
src_dir="$scriptdir/src"
rootfs_stages=()
extra_contexts=()
extra_mounts=()
rootfs_tag="trellis-rootfs"
branch=""

usage() {
	cat <<EOF
USAGE: ${0##*/} [options] [command] [arg...]

<bool> is a value of 0, false, no, 1, true or yes.
all value options may be defined in $config_file

COMMON OPTIONS:
    --branch <name>
        The name of the ostree branch to commit/deploy to. Only valid for the
        commit and deploy commands.
        Default: undefined, must be provided
    --builder-stages <name>
        A comma delimted list of the image stages to build. The stages are
        built in order and commited as images tagged "trellis-builder-<stage>".
        The final stage is tagged as --builder-tag. A build arg
        BASE_IMAGE="localhost/trellis-builder-<previous stage>"
        is passed durring the each build, to allow build stages to be
        dyanmically combined. Stages are expected to be defined in a file named
        "Containerfile.<stage>". Should multiple stages be defined in the same
        file, they should be added to this list as "<group>:<stage>", where
        <group> is the extension of the Containerfile they are defined in.
        Default: undefined.
    --builder-tag <name>
        Name of the tag to use for the pacstrap container.
        Default: $builder_tag
    --ostree-repo <path>
        Path to the ostree repository.
        Default: $ostree_repo
    --podman-build-cache <bool>
        Enable/Disable podman build cache. Boolean. This controls both podmans
        --no-cache option and buildahs BUILDAH_LAYERS environment variable.
        Default: $podman_build_cache
    --pacman-cache <path>
        Path to a persistent pacman package cache. If unset, pacman cache will
        will not be used in the build.
        Default: $pacman_cache
    --aur-cache <path>
        Path to use as a persistent AUR package build cache. If unset, aur
        packages will not be used in the build.
        Default: $aur_cache
    --sysroot-dir
        Path to the directory where your rootfs and all your partitions
        (like boot or efi) are mounted.
        Default: $sysroot_dir
    --sysroot-dir
        Path to the directory where your trellis build hooks are stored. 
        Default: $hooks_dir
    --help
        Print this help message

CONTAINER OPTIONS:
    --src-dir <path>
        Path to the directory with Containerfiles and setup files that build
        the rootfs.
        Default: $src_dir
    --extra-contexts <build contexts>
        A comma delimited list of container build contexts to be used for the
        build.
        Default: undefined, thus no extra build contexts will be used.
    --extra-mounts <paths>
        A comma delimited list of directories or files to be bind mounted during
        the build.
        Default: undefined, thus no extra mounts will be used.
    --rootfs-stages <image stages>
        A comma delimted list of the image stages to build. The stages are
        built in order and commited as images tagged "trellis-stage-<stage>".
        The final stage is tagged as --rootfs-tag. A build arg
        BASE_IMAGE="localhost/trellis-stage-<previous stage>"
        is passed durring the each build, to allow build stages to be
        dyanmically combined. Stages are expected to be defined in a file named
        "Containerfile.<stage>". Should multiple stages be defined in the same
        file, they should be added to this list as "<group>:<stage>", where
        <group> is the extension of the Containerfile they are defined in.
        Default: undefined, thus no images will be built.
    --rootfs-tag <name>
        Name of the tag to use for the rootfs container.
        Default: $rootfs_tag

COMMON COMMANDS:
    prepare_live_env
        Prepare currently booted live ISO environment for setting up a new
        ostree installation.
    build-builder
        (Re-)Build pacstrap container that's used by the other commands and tag
        it with --builder-tag.

CONTAINER COMMANDS:
    build	
        Build all requested stages from files in --src-dir and tag it with
        --rootfs-tag.
    clean
        Remove unused container images.
    run [args...] -- <cmd>
        Run <cmd> in the latest --rootfs-tag container. All changes will be
        lost.
    update
        A macro command that runs "${0##*/} build" and "bootc upgrade" to
        simplify the update process.
EOF
}

# shellcheck source=trellis.conf.example
[[ -f "$config_file" ]] && source "$config_file"

prepare_live_env() {
	msg "Install required packages"
	pacman \
		--needed \
		--noconfirm \
		-S \
		ostree \
		podman

	msg "Patch storage.conf"
	sed -i \
		-e 's|^\(graphroot\s*=\s*\).*|\1"/mnt/setup/container-storage"|g' \
		/etc/containers/storage.conf

	msg "Patch containers.conf"
	sed -i \
		-e 's|^# \(image_copy_tmp_dir\s*=\s*\).*|\1"/mnt/setup/container-tmp"|g' \
		/etc/containers/containers.conf

	mkdir -p "/mnt/setup/container-tmp"
}

_multistage_container_build() {
	tmp_name=$1
	final_tag=$2
	build_cmd=$3
	shift 3
	build_stages=("$@")

	# Build all requested build stages
	last_stage=""
	for build_stage in "${build_stages[@]}"; do
		# Parse build group and build stage
		if [[ "$build_stage" == *":"* ]]; then
			group=$(cut -d: -f1 <<<"$build_stage")
			stage=$(cut -d: -f2 <<<"$build_stage")
		else
			group="$build_stage"
			stage="$build_stage"
		fi

		# Handle tag for final image
		if [[ "$build_stage" == "${build_stages[-1]}" ]]; then
			tag="$final_tag"
		elif [[ "$stage" != "$group" ]]; then
			tag="trellis-${tmp_name}-${group}-${stage}"
		else
			tag="trellis-${tmp_name}-${stage}"
		fi

		# Build requested stage, using the previous stage as a base
		$build_cmd \
			-f "$(find $src_dir -name "Containerfile.$group")" \
			--build-arg BASE_IMAGE="localhost/$last_stage" \
			--target $stage \
			-t "$tag"

		last_stage="$tag"
	done
}

_builder_podman_cmd() {
	podman build \
		"${podman_build_cache_args[@]}" \
		--net=host \
		--cap-add sys_admin \
		--cap-add mknod \
		$@
}

build_builder_container() {
	_multistage_container_build \
		"builder" \
		"$builder_tag" \
		"_builder_podman_cmd" \
		"${builder_stages[@]}"
}

_rootfs_podman_cmd() {
	podman build \
		${podman_build_cache_args[@]} \
		${podman_build_context_args[@]} \
		${pacman_cache_args[@]} \
		${aur_cache_args[@]} \
		${hooks_args[@]} \
		${extra_mount_args[@]} \
		--net=host \
		--cap-add sys_admin \
		--cap-add mknod \
		$@
}

build_rootfs_container() {
	_multistage_container_build \
		"stage" \
		"$rootfs_tag" \
		"_rootfs_podman_cmd" \
		"${rootfs_stages[@]}"
}

run_rootfs_container() {
	podman run \
		--net=host \
		--cap-add all \
		--rm -it \
		"localhost/$rootfs_tag" \
		"$@"
}

long_opts=(
	builder-tag:
	help
	ostree-repo:
	pacman-cache:
	aur-cache:
	podman-build-cache:
	src-dir:
	rootfs-stages:
	extra-contexts:
	rootfs-tag:
	sysroot-dir:
)
if ! temp=$(getopt -o '' --long "$(join_by , "${long_opts[@]}")" -- "$@"); then
	die "Invalid arguments"
fi

eval set -- "$temp"
while true; do
	case "$1" in
	'--branch' | \
		'--builder-tag' | \
		'--rootfs-tag')
		name="$(arg_to_varname "$1")"
		printf -v "$name" "%s" "$2"
		shift 2
		continue
		;;
	'--aur-cache' | \
		'--ostree-repo' | \
		'--pacman-cache' | \
		'--src-dir' | \
		'--sysroot-dir')
		name="$(arg_to_varname "$1")"
		value="$(realpath "$2")"
		printf -v "$name" "%s" "$value"
		shift 2
		continue
		;;
	'--extra-contexts' | \
		'--extra-mounts' | \
		'--rootfs-stages')
		name="$(arg_to_varname "$1")"
		readarray -td, $name <<<$2
		shift 2
		continue
		;;
	'--podman-build-cache')
		name="$(arg_to_varname "$1")"

		case "$2" in
		'true' | '1' | 'yes')
			eval "$name=true"
			;;
		'false' | '0' | 'no')
			eval "$name=false"
			;;
		*)
			die "Unsupported bool value: $2"
			;;
		esac

		shift 2
		continue
		;;
	'--help')
		usage
		exit $(($# ? 0 : 1))
		;;
	'--')
		shift
		break
		;;
	*)
		die "BUG: Unexpected argument: $1"
		;;
	esac
done

if [ -z ${1+x} ]; then
	die "Missing command argument"
fi
command="${1}"
shift 1

pacman_cache_args=()
# shellcheck disable=SC2236 # This doesn't work with -n
if [ ! -z ${pacman_cache+x} ]; then
	mkdir -p "$pacman_cache"
	pacman_cache_args=(
		-v "$pacman_cache:/var/cache/pacman/pkg"
	)
fi

aur_cache_args=()
# shellcheck disable=SC2236 # This doesn't work with -n
if [ ! -z ${aur_cache+x} ]; then
	mkdir -p "$aur_cache"
	aur_cache_args=(
		-v "$aur_cache:/var/cache/trellis/aur"
	)
fi

podman_build_cache_args=()
if [ "$podman_build_cache" = false ]; then
	podman_build_cache_args+=(--no-cache)
	export BUILDAH_LAYERS=false
fi

podman_build_context_args=()
for context in "${extra_contexts[@]}"; do
	podman_build_context_args+=(
		--build-context $context
	)
done

hooks_args=()
# shellcheck disable=SC2236 # This doesn't work with -n
if [ ! -z ${hooks_dir+x} ]; then
	hooks_args=(
		-v "$hooks_dir:$hooks_dir"
		--build-arg "HOOKS_DIR=$hooks_dir"
	)
fi

extra_mount_args=()
for mount in "${extra_mounts[@]}"; do
	extra_mount_args+=(
		-v "$mount:$mount"
	)
done

# Source: https://github.com/archlinux/arch-install-scripts/blob/4802e1197e43e300e8fc545b7b2a0358ad2f920b/common#L75
# shellcheck disable=SC2059 # $1 and $2 can contain the printf modifiers
out() { printf "$1 $2\n" "${@:3}"; }
error() { out "====> ERROR:" "$@"; } >&2
warning() { out "====> WARNING:" "$@"; } >&2
msg() { out "====>" "$@"; }
die() {
	error "$@"
	exit 1
}

arg_to_varname() {
	name="${1:2}"
	echo "${name//-/_}"
}

# Source: https://gitlab.archlinux.org/pacman/pacman/-/blob/v6.0.2/scripts/libmakepkg/util/pkgbuild.sh.in?ref_type=tags#L29
have_function() {
	declare -f "$1" >/dev/null
}

# Source: https://github.com/archlinux/arch-install-scripts/blob/4802e1197e43e300e8fc545b7b2a0358ad2f920b/common#L183
# This outputs code for declaring all variables to stdout. For example, if
# FOO=BAR, then running
#     declare -p FOO
# will result in the output
#     declare -- FOO="bar"
# This function may be used to re-declare all currently used variables and
# functions in a new shell.
declare_all() {
	# Remove read-only variables to avoid warnings. Unfortunately, declare +r -p
	# doesn't work like it looks like it should (declaring only read-write
	# variables). However, declare -rp will print out read-only variables, which
	# we can then use to remove those definitions.
	declare -p | grep -Fvf <(declare -rp)
	# Then declare functions
	declare -pf
}

# Source: https://stackoverflow.com/questions/1527049/how-can-i-join-elements-of-a-bash-array-into-a-delimited-string/17841619#17841619
join_by() {
	local IFS="$1"
	shift
	echo "$*"
}

case "$command" in
'prepare_live_env')
	prepare_live_env
	;;
'build-builder')
	build_builder_container
	;;
'build')
	build_rootfs_container
	;;
'run')
	run_rootfs_container "$@"
	;;
'clean')
	podman system prune
	;;
'update')
	build_rootfs_container
	bootc upgrade
	;;
*)
	die "Unsupported command: ${command}"
	;;
esac

msg "Successful"
